package com.condenast{import flash.display.Sprite;import flash.display.Loader;import flash.net.URLRequest;import flash.system.Security;import flash.system.LoaderContext;import flash.system.ApplicationDomain;import flash.system.SecurityDomain;import flash.events.IOErrorEvent;import flash.events.Event;	public class AssetsLoader extends Sprite{		private var _api:Object;		private var _metrics:Object;		private var _contentMetrics:Object;		private var _config:Object;		private var mc:Sprite;		private var _path:String;				private var _debug:Boolean;    	public function AssetsLoader(_api:Object = null, _config:Object = null) {			this._api = _api;			this._config = _config;    	}		public function init($debug:Boolean):void{			_debug = $debug;			mc = new Sprite;			if(!_debug) _path = _config.getString("assets");			loadSWF();		}		public function setMetrics(_metrics:Object):void{			this._metrics = _metrics;		}				private function loadSWF():void{			var l:Loader = new Loader();			if(!_debug){				Security.allowDomain('*');				var policyFile = (_path.split("origin").length == 2)?"http://origin.ads.thestudio.condenast.com/crossdomain.xml":"http://ads.thestudio.condenast.com/crossdomain.xml";				Security.loadPolicyFile(policyFile);				var context:LoaderContext = new LoaderContext(false, new ApplicationDomain(ApplicationDomain.currentDomain), SecurityDomain.currentDomain);				if(_path != '') l.load(new URLRequest(_path), context);			}			if(_debug) l.load(new URLRequest('assets/assets.swf'));						l.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,function():void{});			l.contentLoaderInfo.addEventListener(Event.COMPLETE, function($e:Event):void{ 				var _swf:ISwf = ISwf($e.target.content);				var ctn:Sprite = Sprite(_swf);				_swf._init(initializeProduct);			});		}				private function initializeProduct(lib):void{			var p:Product = new Product(lib, track);			if(!_debug) _api.message.addEventListener(_api.message.events.ON_MESSAGE, function($e:*):void{ p._catch($e); });			mc.addChild(p);			addChild(mc);		}				private function track(type:String, s:String, url:String = null):void{			var trigger:Object;			if(!_debug){				if(type == 'click' && !_debug){					trigger = _metrics.logInteraction(						_metrics.subtype.INTERACTION_SELECT_SUBTYPE,						_metrics.mode.MODE_CLICK,						s, {});					_contentMetrics = trigger;				}								if(type == 'hover' && !_debug){					trigger = _metrics.logInteraction(						_metrics.subtype.INTERACTION_SELECT_SUBTYPE,						_metrics.mode.MODE_ROLLOVER,						s, {});					_contentMetrics = trigger;				}								if(type == 'custom' && !_debug){					trigger = (_contentMetrics != null)?						_contentMetrics.logInteraction(							_metrics.subtype.INTERACTION_COMPONENT_SUBTYPE,							_metrics.mode.MODE_UNKNOWN,						s, {}):						_metrics.logInteraction(							_metrics.subtype.INTERACTION_COMPONENT_SUBTYPE,							_metrics.mode.MODE_UNKNOWN,						s, {});				}								if(type == 'message' && !_debug){					_api.message.sendMessage(s); 				}								if(type == 'navigateToURL' && !_debug){					trigger = _metrics.logInteraction(						_metrics.subtype.INTERACTION_SELECT_SUBTYPE,						_metrics.mode.MODE_CLICK,						s, {url: url});					_contentMetrics = trigger;					_api.net.navigateToURL(url, {window:"_blank", skipTracking:false}, trigger);				}			}else{				trace(type + ' >> ' + s )			}		}	}}